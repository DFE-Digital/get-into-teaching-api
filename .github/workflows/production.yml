---  
name: Release to Production
on: 
   repository_dispatch:
   workflow_dispatch:
    inputs:
      tags:
        description: 'Release Tag'
        required: true

env:
  DOCKERHUB_REPOSITORY:     dfedigital/get-into-teaching-api
  
jobs:
  deploy_production:
    name: 'Deploy to Production '
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:

       - name: Check Tag is a Release
         run: |
               rval=$(curl -s -X GET https://api.github.com/repos/DFE-Digital/get-into-teaching-api/releases/tags/${{ github.event.inputs.tags }} | jq -r ".message")
               if [ "${rval}" = "Not Found" ]
               then
                   echo "Tag ${{ github.event.inputs.tags }} cannot be found in releases"
                   exit 1
               fi
               exit 0

       - name: Checkout
         uses: actions/checkout@v2
         with: 
            ref: "${{ github.event.inputs.tags }}"
   
       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(git rev-parse --short HEAD )
   
       - name: Wait for any previous runs to complete
         uses: softprops/turnstyle@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           continue-after-seconds: 180

       - uses: hashicorp/setup-terraform@v1.2.1
         with:
           terraform_version: 0.13.4

       - name: Terraform Init
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=production.bk.vars
         env:
             ARM_ACCESS_KEY:           "${{ secrets.PROD_ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME   }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD   }}"
   
       - name: Terraform Plan
         run: |
             cd terraform/paas && pwd
             terraform plan -var-file=production.env.tfvars -out plan
         env:
             ARM_ACCESS_KEY:           "${{ secrets.PROD_ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME   }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD   }}"
             TF_VAR_paas_api_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}} 
             TF_VAR_CRM_SERVICE_URL:   "${{ secrets.PROD_CRM_SERVICE_URL     }}"
             TF_VAR_CRM_CLIENT_ID:     "${{ secrets.PROD_CRM_CLIENT_ID       }}"
             TF_VAR_CRM_CLIENT_SECRET: "${{ secrets.PROD_CRM_CLIENT_SECRET   }}"
             TF_VAR_CRM_TENANT_ID:     "${{ secrets.PROD_CRM_TENANT_ID       }}"
             TF_VAR_SHARED_SECRET:     "${{ secrets.PROD_SHARED_SECRET       }}"
             TF_VAR_NOTIFY_API_KEY:    "${{ secrets.PROD_NOTIFY_API_KEY      }}"
             TF_VAR_TOTP_SECRET_KEY:   "${{ secrets.PROD_TOTP_SECRET_KEY     }}"
             TF_VAR_GOOGLE_API_KEY:    "${{ secrets.PROD_GOOGLE_API_KEY      }}"
             TF_VAR_SENTRY_DSN:        "${{ secrets.SENTRY_DSN }}"
             TF_VAR_docker_username:   "${{ secrets.DOCKERHUB_USERNAME }}"
             TF_VAR_docker_password:   "${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}"

                
       - name: Terraform Apply
         run: |
             cd terraform/paas && pwd
             terraform apply -auto-approve plan
         env:
             ARM_ACCESS_KEY:           "${{ secrets.PROD_ARM_ACCESS_KEY  }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME   }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD   }}"
   
       - name:  Smoke Test
         run: |
             tests/confidence/healthcheck.sh "get-into-teaching-api-prod"  "${{ steps.sha.outputs.short}}" 
 
       - name: Create Sentry release
         if: success()
         uses: getsentry/action-release@v1.1.5
         env:
           SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
           SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
           SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
           VERSION: ${{ steps.sha.outputs.short}}
         with:
           environment: production
 
       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'Carrying out job ${{github.job}}'
           SLACK_TITLE: 'Production Deploy Failure'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

