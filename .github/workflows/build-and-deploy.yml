name: Build and Deploy
concurrency: build_and_deploy_${{ github.ref_name }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to
        required: true
        type: choice
        default: development
        options:
          - review
          - development
          - test
          - production
      pr-number:
        description: PR number for review deployment (required for review environment)
        type: string
        required: false
  pull_request:
    types: [assigned, opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - master

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    name: Build and push to Github Container Registry
    runs-on: ubuntu-latest
    outputs:
      image_tag_sha: "sha-${{ steps.vars.outputs.sha_short }}"
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - name: Get Short SHA
        id: vars
        run: |
          echo "sha_short=$(echo $GITHUB_SHA | cut -c -7)" >> $GITHUB_OUTPUT

      - name: Set docker images variables release
        id: docker
        run: |
             if [ "${{github.ref}}" == "refs/heads/master" ]
             then
                GIT_BRANCH=master
             else
                GIT_REF=${{ github.head_ref }}
                GIT_BRANCH=${GIT_REF##*/}
             fi

             echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Set build action environment variable release
        id: build-vars-release
        run: |
            {
              echo 'TAGS_VAR<<EOF'
              echo ${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
              echo ${{ env.DOCKER_REPOSITORY }}:sha-${{ steps.vars.outputs.sha_short }}
              echo ${{ env.DOCKER_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}
              echo EOF
            } >> "$GITHUB_ENV"
            {
              echo 'MIN_CACHE_FROM_VAR<<EOF'
              echo type=registry,ref=${{ env.DOCKER_REPOSITORY }}:sha-${{ steps.vars.outputs.sha_short }}
              echo type=registry,ref=${{ env.DOCKER_REPOSITORY }}:${{ env.BRANCH_TAG }}
              echo EOF
            } >> "$GITHUB_ENV"

      - name: Build and push docker image
        id: build-image-release
        uses: DFE-Digital/github-actions/build-docker-image@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: ""
          max-cache: false
          main-branch: "master"
          docker-sha: ${{ steps.vars.outputs.sha_short }}
          docker-repository: ${{ env.DOCKER_REPOSITORY }}
          snyk-token: ${{ secrets.SNYK_TOKEN }}

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_FAILURE}}
          SLACK_MESSAGE: "The pipeline has failed to build the API image"
          SLACK_TITLE: "Failure to Build API"
          SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK }}"

  deploy_review_app:
    name: Deploy to review environment
    needs: build
    if: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy')) || (github.event_name == 'workflow_dispatch' && inputs.environment == 'review' && inputs.pr-number != '') }}
    runs-on: ubuntu-latest
    concurrency: deploy_review_${{ github.event.pull_request.number || inputs.pr-number }}
    permissions:
      pull-requests: write
      id-token: write
    environment:
      name: review

    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set PR Number
        id: pr
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "number=${{ inputs.pr-number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - uses: DFE-Digital/github-actions/set-kubelogin-environment@master
        with:
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Review Environment
        uses: ./.github/workflows/actions/deploy_v2
        id: deploy
        with:
          environment: review
          sha: ${{needs.build.outputs.image_tag_sha}}
          pr-number: ${{ steps.pr.outputs.number }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Review App URL
        id: review_app
        run: |
          REVIEW_APP_URL=$(terraform -chdir=terraform/aks output -raw app_url)
          echo "app_hostname=${REVIEW_APP_URL}" >> $GITHUB_OUTPUT

      - name: Update PR with Review App URL
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: review-app
          number: ${{ steps.pr.outputs.number }}
          message: |
            ### Deployments

            | App | URL |
            | --- | --- |
            | Get Into Teaching API | [${{ steps.review_app.outputs.app_hostname }}](${{ steps.review_app.outputs.app_hostname }}) |

            ### Testing Instructions

            **For GIT Website testing:**
            Use the GIT website with this API URL by setting the following environment variable:
            ```
            GET_INTO_TEACHING_API_URL=${{ steps.review_app.outputs.app_hostname }}
            ```

            **For School Experience testing:**
            Use School Experience with this API URL by setting the following environment variable:
            ```
            GET_INTO_TEACHING_API_URL=${{ steps.review_app.outputs.app_hostname }}
            ```

            ### Environment Details
            - Has dedicated Postgres and Redis instances
            - Points to the same test CRM as development
            - Review app will be destroyed when this PR is closed or by running the "Destroy Review App" workflow

  deploy:
    name: Deploy to ${{ matrix.environment }} environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    concurrency: deploy_${{ matrix.environment }}
    needs: [build]
    strategy:
      max-parallel: 1
      matrix:
        environment: [development, test]
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.deploy-url }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Trigger ${{ matrix.environment }} Deployment
        uses: ./.github/workflows/actions/deploy_v2
        id: deploy
        with:
          environment: ${{ matrix.environment }}
          sha: ${{needs.build.outputs.image_tag_sha}}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Keep release creation logic only for development environment
      - name: Generate Tag from PR Number
        if: matrix.environment == 'development'
        id: tag_version
        uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@master
        with:
          SHA: ${{github.sha}}

      - name: Create a GitHub Release
        id: release
        if: matrix.environment == 'development' && steps.tag_version.outputs.pr_found == 1
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.pr_number }}
          release_name: Release ${{ steps.tag_version.outputs.pr_number }}
          commitish: ${{github.sha}}
          prerelease: false
          draft: false

      - name: Copy PR Info to Release
        if: matrix.environment == 'development' && steps.release.outputs.id
        uses: DFE-Digital/github-actions/CopyPRtoRelease@master
        with:
          PR_NUMBER: ${{ steps.tag_version.outputs.pr_number }}
          RELEASE_ID: ${{ steps.release.outputs.id }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_FAILURE}}
          SLACK_MESSAGE: "Deployment to the ${{ matrix.environment }} environment has failed"
          SLACK_TITLE: "Deployment to the ${{ matrix.environment }} environment has failed"
          SLACK_WEBHOOK: "${{ secrets.SLACK_WEBHOOK }}"

  deploy_production:
    name: Deploy to production environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    concurrency: deploy_production
    needs: [build, deploy]
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deploy-url }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v5

      - name: set-up-environment
        uses: DFE-Digital/github-actions/set-up-environment@master

      - uses: Azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Trigger Production Deployment
        uses: ./.github/workflows/actions/deploy_v2
        id: deploy
        with:
          environment: production
          sha: ${{needs.build.outputs.image_tag_sha}}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Generate Tag from PR Number
        id: tag_version
        uses: DFE-Digital/github-actions/GenerateReleaseFromSHA@master
        with:
          SHA: ${{github.sha}}

      - name: Get Release Id from Tag
        id: tag_id
        uses: DFE-Digital/github-actions/DraftReleaseByTag@master
        with:
          TAG: ${{ steps.tag_version.outputs.pr_number }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if found
        if: steps.tag_id.outputs.release_id == ''
        run: |
          echo "::error ::Tag ${{ steps.tag_version.outputs.pr_number }} cannot be found in releases"
          exit 1

      - name: Slack Release Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_SUCCESS}}
          SLACK_TITLE: "Release Published to production: ${{steps.tag_id.outputs.release_name}}"
          SLACK_MESSAGE: ${{ fromJson( steps.tag_id.outputs.release_body) }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_RELEASE_NOTE_WEBHOOK }}
          MSG_MINIMAL: true

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_COLOR: ${{env.SLACK_FAILURE}}
          SLACK_TITLE: "Manual Release Failed: ${{steps.tag_id.outputs.release_name}}"
          SLACK_MESSAGE: Failure deploying production release
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
