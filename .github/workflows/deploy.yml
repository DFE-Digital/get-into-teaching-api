name: Deploy to PaaS
on:
  workflow_dispatch:
    inputs:
      environment:
        description: The environment to deploy to Development/Test/Production/
        required: true
      sha:
        description: Commit sha to be deployed
        required: true


jobs:
  turnstyle:
    name: Wait for any previous deployments
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
       - name: Turnstyle
         uses: softprops/turnstyle@v1
         with:
            continue-after-seconds: 300
            same-branch-only: false

  deploy:
    name: Deploy ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: 
       name: ${{ github.event.inputs.environment }}
    needs: turnstyle

    defaults:
      run:
        shell: bash
    steps:
       - name: Checkout
         uses: actions/checkout@v2

       - name: set-up-environment
         uses: DFE-Digital/github-actions/set-up-environment@master

       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(echo "${{ github.event.inputs.sha }}" | cut -c -7)

       - name: Setup Environment Variables
         id:  variables
         run: |
             if [ "${{github.event.inputs.environment }}" == "Development" ]
             then
                 echo ::set-output name=control::$(echo "dev" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-dev" )
                 echo ::set-output name=key::"api.dev.terraform"
                 echo ::set-output name=docker_image::"${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}"

             fi

             if [ "${{github.event.inputs.environment }}" == "Test" ]
             then
                 echo ::set-output name=control::$(echo "test" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-test" )
                 echo ::set-output name=key::"api.test.terraform"
                 echo ::set-output name=docker_image::"${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}"

             fi

             if [ "${{github.event.inputs.environment }}" == "Production" ]
             then
                 echo ::set-output name=control::$(echo "production" )
                 echo ::set-output name=healthcheck::$(echo "${{env.PAAS_APPLICATION_NAME}}-prod" )
                 echo ::set-output name=key::"api.production.terraform"
                 echo ::set-output name=docker_image::"${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}}"

             fi

       - uses: hashicorp/setup-terraform@v1.3.2
         with:
              terraform_version: 0.13.4

       - name: Start ${{ github.event.inputs.environment }} Deployment
         uses: bobheadxi/deployments@v0.5.1
         id: deployment
         with:
           step: start
           token: ${{ secrets.GITHUB_TOKEN }}
           env: ${{ github.event.inputs.environment }}
           ref: ${{ github.event.inputs.sha }}

       - name: Terraform ( ${{github.event.inputs.environment}} ) 
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=${{steps.variables.outputs.control}}.bk.vars -backend-config="key=${{steps.variables.outputs.key}}.tfstate"
             terraform plan -var-file=${{steps.variables.outputs.control}}.env.tfvars -out plan
             terraform apply -auto-approve plan
         env:
             ARM_ACCESS_KEY:               ${{ secrets.ARM_ACCESS_KEY  }}
             TF_VAR_AZURE_CREDENTIALS:     ${{ secrets.AZURE_CREDENTIALS }}
             TF_VAR_paas_api_docker_image: ${{ steps.variables.outputs.docker_image}}

       - name: Smoke tests
         run: |
             tests/confidence/healthcheck.sh  "${{steps.variables.outputs.healthcheck}}"  "${{ steps.sha.outputs.short }}"

       - name: Update ${{ github.event.inputs.environment }} status
         if: success() 
         uses: bobheadxi/deployments@v0.4.3
         with:
           step: finish
           token: ${{ secrets.GITHUB_TOKEN }}
           status: ${{ job.status }}
           deployment_id: ${{ steps.deployment.outputs.deployment_id }}
