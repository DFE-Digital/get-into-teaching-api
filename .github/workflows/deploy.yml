---  
name: Deploy to PaaS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to eg: qa, staging, production etc'
        required: true
      sha:
        description: Commit sha to be deployed
        required: true

env:
  DOCKERHUB_REPOSITORY:     dfedigital/get-into-teaching-api
  
jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:

       - uses: softprops/turnstyle@v1
         name: Wait for other inprogress deployment runs
         with:
            continue-after-seconds: 180
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

       - name: Start ${{ github.event.inputs.environment }} Deployment
         uses: bobheadxi/deployments@v0.4.2
         id: deployment
         with:
           step: start
           token: ${{ secrets.GITHUB_TOKEN }}
           env: ${{ github.event.inputs.environment }}
           ref: ${{ github.event.inputs.sha }}

       - name: Checkout
         uses: actions/checkout@v2
   
       - name: Set Variables
         id: sha
         run: |
          echo ::set-output name=short::$(git rev-parse --short $GITHUB_SHA)
          $( cat github/workflows/environments/${DEPLOY_ENV}.env )
         env:
            DEPLOY_ENV: ${{ github.event.inputs.environment }}

       - uses: hashicorp/setup-terraform@v1
         with:
           terraform_version: 0.13.4

       - name: Terraform Init
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=${{env.TERRAFORM_BACKEND}}
   
       - name: Terraform Plan
         run: |
             cd terraform/paas && pwd
             terraform plan -var-file=${{env.TERRAFORM_TFVARS}} -out plan
   
       - name: Terraform Apply
         run: |
             cd terraform/paas && pwd
             terraform apply -auto-approve plan
   
       - name:  Smoke Test
         run: |
             tests/confidence/healthcheck.sh "get-into-teaching-api-test"  "${{ steps.sha.outputs.short}}" 

       - name: Create Sentry release
         if: success()
         uses: getsentry/action-release@v1.1.1
         with:
           environment: ${{ github.event.inputs.environment }}

       - name: Update ${{ github.event.inputs.environment }} status
         if: always() 
         uses: bobheadxi/deployments@v0.4.2
         with:
           step: finish
           token: ${{ secrets.GITHUB_TOKEN }}
           env: ${{ github.event.inputs.environment }}
           status: ${{ job.status }}
           deployment_id: ${{ steps.deployment.outputs.deployment_id }}
           ref: ${{ github.event.inputs.sha }}

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
            SLACK_TITLE: 'API Failure to Deploy to ${{ github.event.inputs.environment }}' 
            SLACK_MESSAGE: 'Pipeline Failure carrying out job ${{github.job}}'

       - name: Trigger ${{ env.NEXT_ENV }} Deployment
         if: env.NEXT_ENV != '' && github.ref == 'refs/heads/master' 
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"environment": "${{ env.NEXT_ENV }}", "sha": "${{ github.event.inputs.sha }}"}'

