name: Build and Deploy 
on:
  repository_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master

env:
  DOCKERHUB_REPOSITORY:     dfedigital/get-into-teaching-api
  CF_PROVIDER_DIR: $HOME/.terraform.d/plugins/linux_amd64/terraform-provider-cloudfoundry
  
jobs:
  build_docker:
    name: Build and push to DockerHub
    runs-on: ubuntu-latest
    outputs:
       image: ${{steps.docker_image.outputs.IMAGE}}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set Vars
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v1
        if: github.ref == 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          push: true
          build_args: GIT_COMMIT_SHA=${{ steps.vars.outputs.sha_short }}

      - name: Build only
        uses: docker/build-push-action@v1
        if: github.ref != 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          push: false
          build_args: GIT_COMMIT_SHA=${{ steps.vars.outputs.sha_short }}

      - name: Set DOCKER_IMAGE environment variable
        id:  docker_image
        run: |-
          echo ::set-output name=IMAGE::${{ env.APP_REPOSITORY }}:sha-$(echo "${{ github.sha }}" | cut -c -7)

  deploy_qa:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest

    needs:
         build_docker

    defaults:
      run:
        shell: bash

    if: github.ref == 'refs/heads/master'

    steps:

       - name: Checkout
         uses: actions/checkout@v2
   
       - uses: hashicorp/setup-terraform@v1
         with:
              terraform_version: 0.12.29

       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(git rev-parse --short $GITHUB_SHA)

       - name: Wait for any previous runs to complete
         uses: softprops/turnstyle@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           continue-after-seconds: 180
           
       - name: Install Terraform CloudFoundry Provider
         run: |
             mkdir -p $HOME/.terraform.d/plugins/linux_amd64
             wget -O ${{ env.CF_PROVIDER_DIR }} https://github.com/cloudfoundry-community/terraform-provider-cf/releases/latest/download/terraform-provider-cloudfoundry_linux_amd64
             chmod +x ${{ env.CF_PROVIDER_DIR }}

       - name: Terraform Init
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=dev.bk.vars
         env:
               TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
               TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
               ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY    }}"
   
       - name: Terraform Plan
         run: |
             cd terraform/paas && pwd
             terraform plan -var-file=dev.env.tfvars -out plan
         env:
             TF_VAR_paas_api_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}} 
             TF_VAR_CRM_SERVICE_URL:   "${{ secrets.CRM_SERVICE_URL     }}"
             TF_VAR_CRM_CLIENT_ID:     "${{ secrets.CRM_CLIENT_ID       }}"
             TF_VAR_CRM_CLIENT_SECRET: "${{ secrets.CRM_CLIENT_SECRET   }}"
             TF_VAR_CRM_TENANT_ID:     "${{ secrets.CRM_TENANT_ID       }}"
             TF_VAR_SHARED_SECRET:     "${{ secrets.SHARED_SECRET       }}"
             TF_VAR_NOTIFY_API_KEY:    "${{ secrets.NOTIFY_API_KEY      }}"
             TF_VAR_TOTP_SECRET_KEY:   "${{ secrets.TOTP_SECRET_KEY     }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY    }}"
   
       - name: Terraform Apply
         run: |
             cd terraform/paas && pwd
             terraform apply -auto-approve plan
         env:
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY    }}"
   
       - name:  Smoke Test
         run: |
             tests/confidence/healthcheck.sh "get-into-teaching-api-dev"  "${{steps.sha.outputs.short}}" 

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: ':disappointed_relieved: Pipeline Failure carrying out job ${{github.job}} :disappointed_relieved:'
           SLACK_TITLE: 'Failure: ${{ github.workflow }}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}


