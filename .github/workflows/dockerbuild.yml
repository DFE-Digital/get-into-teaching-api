name: Build and Deploy 
on:
  repository_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master

env:
  DOCKERHUB_REPOSITORY:     dfedigital/get-into-teaching-api
  CF_PROVIDER_DIR: $HOME/.terraform.d/plugins/linux_amd64/terraform-provider-cloudfoundry
  CF_PROVIDER_URL: https://github.com/cloudfoundry-community/terraform-provider-cloudfoundry/releases/download/v0.12.3/terraform-provider-cloudfoundry_v0.12.3_linux_amd64
  
jobs:
  build_docker:
    name: Build and push to DockerHub
    runs-on: ubuntu-latest
    outputs:
       image: ${{steps.docker_image.outputs.IMAGE}}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: vars
        run: |
             echo ::set-output name=sha_short::$(echo $GITHUB_SHA | cut -c -7)
             if [ ${{github.ref}} == 'refs/heads/master' ]
             then
             echo ::set-output name=push::true
             else
             echo ::set-output name=push::true
             fi

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          push: ${{ steps.vars.outputs.push }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.vars.outputs.sha_short }}
          build-args: GIT_COMMIT_SHA=${{ steps.vars.outputs.sha_short }}


  deploy_dev:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest

    needs:
         build_docker

    defaults:
      run:
        shell: bash

#    if: github.ref == 'refs/heads/master'

    steps:

       - name: Checkout
         uses: actions/checkout@v2
   
       - uses: hashicorp/setup-terraform@v1
         with:
              terraform_version: 0.12.29

       - name: Get Short SHA
         id: sha
         run: echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

       - name: Wait for any previous runs to complete
         uses: softprops/turnstyle@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           continue-after-seconds: 180
           
       - name: Install Terraform CloudFoundry Provider
         run: |
             mkdir -p $HOME/.terraform.d/plugins/linux_amd64
             wget -O ${{ env.CF_PROVIDER_DIR }} ${{ env.CF_PROVIDER_URL}}
             chmod +x ${{ env.CF_PROVIDER_DIR }}

       - name: Terraform Init
         run: |
             cd terraform/paas && pwd
             terraform init -backend-config=dev.bk.vars
         env:
               TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
               TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
               ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY    }}"
   
       - name: Terraform Plan
         run: |
             cd terraform/paas && pwd
             terraform plan -var-file=dev.env.tfvars -out plan
         env:
             TF_VAR_paas_api_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short}} 
             TF_VAR_CRM_SERVICE_URL:   "${{ secrets.CRM_SERVICE_URL     }}"
             TF_VAR_CRM_CLIENT_ID:     "${{ secrets.CRM_CLIENT_ID       }}"
             TF_VAR_CRM_CLIENT_SECRET: "${{ secrets.CRM_CLIENT_SECRET   }}"
             TF_VAR_CRM_TENANT_ID:     "${{ secrets.CRM_TENANT_ID       }}"
             TF_VAR_SHARED_SECRET:     "${{ secrets.SHARED_SECRET       }}"
             TF_VAR_PEN_TEST_SHARED_SECRET:     "${{ secrets.PEN_TEST_SHARED_SECRET       }}"
             TF_VAR_NOTIFY_API_KEY:    "${{ secrets.NOTIFY_API_KEY      }}"
             TF_VAR_TOTP_SECRET_KEY:   "${{ secrets.TOTP_SECRET_KEY     }}"
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY    }}"
             TF_VAR_SENTRY_DSN:        "${{ secrets.SENTRY_DSN }}"
   
       - name: Terraform Apply
         run: |
             cd terraform/paas && pwd
             terraform apply -auto-approve plan
         env:
             TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
             TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
             ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY    }}"
   
       - name:  Smoke Test
         run: |
             tests/confidence/healthcheck.sh "get-into-teaching-api-dev"  "${{steps.sha.outputs.short}}" 

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'The pipeline has failed to deploy the API to the development environment'
           SLACK_TITLE: 'Failure to Deploy API (DEV)'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}


