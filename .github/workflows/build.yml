name: Build 
on:
  repository_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master

env:
  DOCKERHUB_REPOSITORY:  dfedigital/get-into-teaching-api
  DOMAIN:                london.cloudapps.digital
  APPLICATION:           Get Into Teaching API Service
  PAAS_APPLICATION_NAME: get-into-teaching-api

  
jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check workflow concurrency
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: Content Delivery has failed. This is due to a workflow concurrency issue
           SLACK_TITLE: Turnstyle failure ${{ github.workflow }}
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
           SLACK_FOOTER: ${{env.APPLICATION}}

  build:
    name: Build and push to DockerHub
    runs-on: ubuntu-latest
    needs: turnstyle 
    outputs:
       image: ${{steps.docker_image.outputs.IMAGE}}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Get Short SHA
        id: vars
        run: |
             echo ::set-output name=sha_short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref == 'refs/heads/master' }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
                 ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.vars.outputs.sha_short }}
          build-args: GIT_COMMIT_SHA=${{ steps.vars.outputs.sha_short }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'The pipeline has failed to build the API image'
           SLACK_TITLE: 'Failure to Build API '
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
           SLACK_FOOTER: ${{ env.APPLICATION }}

  development:
    name: Development Deployment
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{steps.tag_version.outputs.tag}}
      release_sha: ${{steps.tag_version.outputs.sha}}
    steps:
       - name: Trigger Development Deployment
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"environment": "Development", "sha": "${{ github.sha }}"}'
           ref: ${{github.ref}}

       - name: Wait for Deployment to Development
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN}}
           checkName: Deploy Development
           ref: ${{github.ref}}

       - name: Check if Development Deployment has returned with a failure
         if: steps.wait-for-deploy.outputs.conclusion == 'failure'
         run: exit 1

       - name: Trigger OWASP Testing
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: owasp
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"environment": "dev"}'

       - name: Generate Tag from PR Number
         id: tag_version
         run: |
           MATCH="Merge pull request #[0-9]+"
           STRING=$(curl -s -X GET "https://api.github.com/repos/${{github.repository}}/commits/${{github.sha}}" | jq -r  ".commit.message")

           if [[ ${STRING}  =~ ${MATCH} ]] ;
           then
              echo "Pull request merge"
              TAG=$( echo ${STRING} | grep -oh "[0-9]\+" | head -1 )
              echo "PR Number ${TAG}"
              BODY=$(curl -s -X GET "https://api.github.com/repos/${{github.repository}}/pulls/${TAG}" | jq -r ".body")
           else
              echo "Not a pull request merge"
              TAG="0"
              BODY="Nothing"
           fi
           echo ::set-output name=tag::"PR-${TAG}"
           echo ::set-output name=changelog::"${BODY}"
           echo ::set-output name=sha::"${{github.sha}}"

       - name: Create a GitHub Release
         if: steps.tag_version.outputs.tag != '0'
         uses: actions/create-release@v1
         env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
            tag_name: ${{ steps.tag_version.outputs.tag }}
            release_name: Release ${{ steps.tag_version.outputs.tag }}
            body: ${{ steps.tag_version.outputs.changelog }}
            commitish: ${{ steps.tag_version.outputs.sha}}
            prerelease: false
            draft:      false

  qa:
    name: Quality Assurance Deployment
    needs: development
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
       - name: Trigger Deployment to QA
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           workflow: Deploy to PaaS
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"environment": "Test", "sha": "${{ github.sha }}" }'
           ref: ${{github.ref}}

       - name: Wait for Deployment to QA
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN}}
           checkName: Deploy Test
           ref: ${{github.ref}}

       - name: Check if QA Deployment has returned with a failure
         if: steps.wait-for-deploy.outputs.conclusion == 'failure'
         run: exit 1

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#B90E0A'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_TITLE: Failure in Post-Development Deploy
           SLACK_MESSAGE: Failure with initialising QA deployment for ${{env.APPLICATION}}
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
           SLACK_FOOTER: ${{env.APPLICATION}}

  cypress:
     name: Run Cypress Tests on QA
     runs-on: ubuntu-latest
     needs: qa
     steps:

       - name: Trigger Cypress Tests (DFE-Digital/get-into-teaching-frontend-tests )
         uses: benc-uk/workflow-dispatch@v1.1
         with:
           repo: DFE-Digital/get-into-teaching-frontend-tests
           workflow: Cypress
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
           inputs: '{"application": "BOTH" , "reference": "${{ github.sha }}" }'
           ref:  refs/heads/master

       - name: Wait for Cypress Tests
         uses: fountainhead/action-wait-for-check@v1.0.0
         id: wait-for-deploy
         with:
           token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN}}
           checkName: ${{ github.sha }}
           ref: refs/heads/master
           repo: get-into-teaching-frontend-tests
           intervalSeconds: 30
           timeoutSeconds: 1800

       - name: Check for test failure
         if: steps.wait-for-build.outputs.conclusion == 'failure'
         run: exit 1

  production:
     name: Production Deployment
     runs-on: ubuntu-latest
     needs: [ cypress , development ]
     steps:
       - name: Get Release Id from Tag
         id:   tag_id
         run: |
              ID=$(curl -s -X GET "https://api.github.com/repos/${{github.repository}}/releases/tags/${{needs.development.outputs.release_tag}}" | jq -r .id )
              echo ::set-output name=tag_id::"${ID}"

       - name: Publish Release
         uses: eregon/publish-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           release_id: ${{steps.tag_id.outputs.tag_id}}

       - name: Slack Notification
         if: failure()
         uses: rtCamp/action-slack-notify@master
         env:
           SLACK_USERNAME: GiT Deployment
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#B90E0A'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_TITLE: Production Release ${{github.event.title}}
           SLACK_MESSAGE: Failure deploying Production release
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
           SLACK_FOOTER: ${{env.APPLICATION}}
